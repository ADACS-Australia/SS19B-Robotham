// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// get_median
double get_median(Rcpp::NumericVector clip, Rcpp::Function median);
RcppExport SEXP _ProFound_get_median(SEXP clipSEXP, SEXP medianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type clip(clipSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type median(medianSEXP);
    rcpp_result_gen = Rcpp::wrap(get_median(clip, median));
    return rcpp_result_gen;
END_RCPP
}
// subset_cpp_inplace
void subset_cpp_inplace(Rcpp::NumericMatrix image, const int scol, const int ecol, const int srow, const int erow, const int coffset, const int roffset, Rcpp::NumericMatrix oimage);
RcppExport SEXP _ProFound_subset_cpp_inplace(SEXP imageSEXP, SEXP scolSEXP, SEXP ecolSEXP, SEXP srowSEXP, SEXP erowSEXP, SEXP coffsetSEXP, SEXP roffsetSEXP, SEXP oimageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type scol(scolSEXP);
    Rcpp::traits::input_parameter< const int >::type ecol(ecolSEXP);
    Rcpp::traits::input_parameter< const int >::type srow(srowSEXP);
    Rcpp::traits::input_parameter< const int >::type erow(erowSEXP);
    Rcpp::traits::input_parameter< const int >::type coffset(coffsetSEXP);
    Rcpp::traits::input_parameter< const int >::type roffset(roffsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type oimage(oimageSEXP);
    subset_cpp_inplace(image, scol, ecol, srow, erow, coffset, roffset, oimage);
    return R_NilValue;
END_RCPP
}
// subset_cpp_inplaceI
void subset_cpp_inplaceI(Rcpp::IntegerMatrix image, const int scol, const int ecol, const int srow, const int erow, const int coffset, const int roffset, Rcpp::LogicalMatrix oimage);
RcppExport SEXP _ProFound_subset_cpp_inplaceI(SEXP imageSEXP, SEXP scolSEXP, SEXP ecolSEXP, SEXP srowSEXP, SEXP erowSEXP, SEXP coffsetSEXP, SEXP roffsetSEXP, SEXP oimageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type scol(scolSEXP);
    Rcpp::traits::input_parameter< const int >::type ecol(ecolSEXP);
    Rcpp::traits::input_parameter< const int >::type srow(srowSEXP);
    Rcpp::traits::input_parameter< const int >::type erow(erowSEXP);
    Rcpp::traits::input_parameter< const int >::type coffset(coffsetSEXP);
    Rcpp::traits::input_parameter< const int >::type roffset(roffsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type oimage(oimageSEXP);
    subset_cpp_inplaceI(image, scol, ecol, srow, erow, coffset, roffset, oimage);
    return R_NilValue;
END_RCPP
}
// adacsFindSkyCellValuesC
Rcpp::NumericVector adacsFindSkyCellValuesC(Rcpp::NumericMatrix image, Rcpp::Nullable<Rcpp::IntegerMatrix> objects, Rcpp::Nullable<Rcpp::IntegerMatrix> mask, const double loc1, const double loc2, const double box1, const double box2, const double boxadd1, const double boxadd2, const int skypixmin, const int boxiters);
RcppExport SEXP _ProFound_adacsFindSkyCellValuesC(SEXP imageSEXP, SEXP objectsSEXP, SEXP maskSEXP, SEXP loc1SEXP, SEXP loc2SEXP, SEXP box1SEXP, SEXP box2SEXP, SEXP boxadd1SEXP, SEXP boxadd2SEXP, SEXP skypixminSEXP, SEXP boxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const double >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< const double >::type loc2(loc2SEXP);
    Rcpp::traits::input_parameter< const double >::type box1(box1SEXP);
    Rcpp::traits::input_parameter< const double >::type box2(box2SEXP);
    Rcpp::traits::input_parameter< const double >::type boxadd1(boxadd1SEXP);
    Rcpp::traits::input_parameter< const double >::type boxadd2(boxadd2SEXP);
    Rcpp::traits::input_parameter< const int >::type skypixmin(skypixminSEXP);
    Rcpp::traits::input_parameter< const int >::type boxiters(boxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(adacsFindSkyCellValuesC(image, objects, mask, loc1, loc2, box1, box2, boxadd1, boxadd2, skypixmin, boxiters));
    return rcpp_result_gen;
END_RCPP
}
// adacsFindSkyCellValuesBoxC
Rcpp::IntegerVector adacsFindSkyCellValuesBoxC(Rcpp::NumericMatrix image, Rcpp::Nullable<Rcpp::IntegerMatrix> objects, Rcpp::Nullable<Rcpp::IntegerMatrix> mask, const double loc1, const double loc2, const double box1, const double box2, const double boxadd1, const double boxadd2, const int skypixmin, const int boxiters);
RcppExport SEXP _ProFound_adacsFindSkyCellValuesBoxC(SEXP imageSEXP, SEXP objectsSEXP, SEXP maskSEXP, SEXP loc1SEXP, SEXP loc2SEXP, SEXP box1SEXP, SEXP box2SEXP, SEXP boxadd1SEXP, SEXP boxadd2SEXP, SEXP skypixminSEXP, SEXP boxitersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type image(imageSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type objects(objectsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< const double >::type loc1(loc1SEXP);
    Rcpp::traits::input_parameter< const double >::type loc2(loc2SEXP);
    Rcpp::traits::input_parameter< const double >::type box1(box1SEXP);
    Rcpp::traits::input_parameter< const double >::type box2(box2SEXP);
    Rcpp::traits::input_parameter< const double >::type boxadd1(boxadd1SEXP);
    Rcpp::traits::input_parameter< const double >::type boxadd2(boxadd2SEXP);
    Rcpp::traits::input_parameter< const int >::type skypixmin(skypixminSEXP);
    Rcpp::traits::input_parameter< const int >::type boxiters(boxitersSEXP);
    rcpp_result_gen = Rcpp::wrap(adacsFindSkyCellValuesBoxC(image, objects, mask, loc1, loc2, box1, box2, boxadd1, boxadd2, skypixmin, boxiters));
    return rcpp_result_gen;
END_RCPP
}
// adacsmagclip
Rcpp::NumericVector adacsmagclip(Rcpp::NumericMatrix x, const int sigma, const int clipiters, const double sigmasel, const int estimate);
RcppExport SEXP _ProFound_adacsmagclip(SEXP xSEXP, SEXP sigmaSEXP, SEXP clipitersSEXP, SEXP sigmaselSEXP, SEXP estimateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type clipiters(clipitersSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmasel(sigmaselSEXP);
    Rcpp::traits::input_parameter< const int >::type estimate(estimateSEXP);
    rcpp_result_gen = Rcpp::wrap(adacsmagclip(x, sigma, clipiters, sigmasel, estimate));
    return rcpp_result_gen;
END_RCPP
}
// adacsmagclipV
Rcpp::NumericVector adacsmagclipV(Rcpp::NumericVector x, const int sigma, const int clipiters, const double sigmasel, const int estimate);
RcppExport SEXP _ProFound_adacsmagclipV(SEXP xSEXP, SEXP sigmaSEXP, SEXP clipitersSEXP, SEXP sigmaselSEXP, SEXP estimateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type clipiters(clipitersSEXP);
    Rcpp::traits::input_parameter< const double >::type sigmasel(sigmaselSEXP);
    Rcpp::traits::input_parameter< const int >::type estimate(estimateSEXP);
    rcpp_result_gen = Rcpp::wrap(adacsmagclipV(x, sigma, clipiters, sigmasel, estimate));
    return rcpp_result_gen;
END_RCPP
}
// interpolateAkimaGrid
void interpolateAkimaGrid(Rcpp::NumericVector xseq, Rcpp::NumericVector yseq, Rcpp::NumericMatrix tempmat_sky, Rcpp::NumericMatrix output);
RcppExport SEXP _ProFound_interpolateAkimaGrid(SEXP xseqSEXP, SEXP yseqSEXP, SEXP tempmat_skySEXP, SEXP outputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xseq(xseqSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yseq(yseqSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tempmat_sky(tempmat_skySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type output(outputSEXP);
    interpolateAkimaGrid(xseq, yseq, tempmat_sky, output);
    return R_NilValue;
END_RCPP
}
// water_cpp
Rcpp::IntegerMatrix water_cpp(Rcpp::NumericVector image, const int nx, const int ny, const double abstol, const double reltol, const double cliptol, const int ext, const double skycut, const int pixcut, const bool verbose, const int Ncheck);
RcppExport SEXP _ProFound_water_cpp(SEXP imageSEXP, SEXP nxSEXP, SEXP nySEXP, SEXP abstolSEXP, SEXP reltolSEXP, SEXP cliptolSEXP, SEXP extSEXP, SEXP skycutSEXP, SEXP pixcutSEXP, SEXP verboseSEXP, SEXP NcheckSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const int >::type ny(nySEXP);
    Rcpp::traits::input_parameter< const double >::type abstol(abstolSEXP);
    Rcpp::traits::input_parameter< const double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< const double >::type cliptol(cliptolSEXP);
    Rcpp::traits::input_parameter< const int >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const double >::type skycut(skycutSEXP);
    Rcpp::traits::input_parameter< const int >::type pixcut(pixcutSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type Ncheck(NcheckSEXP);
    rcpp_result_gen = Rcpp::wrap(water_cpp(image, nx, ny, abstol, reltol, cliptol, ext, skycut, pixcut, verbose, Ncheck));
    return rcpp_result_gen;
END_RCPP
}
// order_cpp
IntegerVector order_cpp(NumericVector x);
RcppExport SEXP _ProFound_order_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// tabulate_cpp
IntegerVector tabulate_cpp(const IntegerVector& x, const int max);
RcppExport SEXP _ProFound_tabulate_cpp(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tabulate_cpp(x, max));
    return rcpp_result_gen;
END_RCPP
}
// water_cpp_old
IntegerVector water_cpp_old(const NumericVector image, const int nx, const int ny, const double abstol, const double reltol, const double cliptol, const int ext, const double skycut, const int pixcut, const bool verbose, const int Ncheck);
RcppExport SEXP _ProFound_water_cpp_old(SEXP imageSEXP, SEXP nxSEXP, SEXP nySEXP, SEXP abstolSEXP, SEXP reltolSEXP, SEXP cliptolSEXP, SEXP extSEXP, SEXP skycutSEXP, SEXP pixcutSEXP, SEXP verboseSEXP, SEXP NcheckSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const int >::type ny(nySEXP);
    Rcpp::traits::input_parameter< const double >::type abstol(abstolSEXP);
    Rcpp::traits::input_parameter< const double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< const double >::type cliptol(cliptolSEXP);
    Rcpp::traits::input_parameter< const int >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const double >::type skycut(skycutSEXP);
    Rcpp::traits::input_parameter< const int >::type pixcut(pixcutSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type Ncheck(NcheckSEXP);
    rcpp_result_gen = Rcpp::wrap(water_cpp_old(image, nx, ny, abstol, reltol, cliptol, ext, skycut, pixcut, verbose, Ncheck));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ProFound_get_median", (DL_FUNC) &_ProFound_get_median, 2},
    {"_ProFound_subset_cpp_inplace", (DL_FUNC) &_ProFound_subset_cpp_inplace, 8},
    {"_ProFound_subset_cpp_inplaceI", (DL_FUNC) &_ProFound_subset_cpp_inplaceI, 8},
    {"_ProFound_adacsFindSkyCellValuesC", (DL_FUNC) &_ProFound_adacsFindSkyCellValuesC, 11},
    {"_ProFound_adacsFindSkyCellValuesBoxC", (DL_FUNC) &_ProFound_adacsFindSkyCellValuesBoxC, 11},
    {"_ProFound_adacsmagclip", (DL_FUNC) &_ProFound_adacsmagclip, 5},
    {"_ProFound_adacsmagclipV", (DL_FUNC) &_ProFound_adacsmagclipV, 5},
    {"_ProFound_interpolateAkimaGrid", (DL_FUNC) &_ProFound_interpolateAkimaGrid, 4},
    {"_ProFound_water_cpp", (DL_FUNC) &_ProFound_water_cpp, 11},
    {"_ProFound_order_cpp", (DL_FUNC) &_ProFound_order_cpp, 1},
    {"_ProFound_tabulate_cpp", (DL_FUNC) &_ProFound_tabulate_cpp, 2},
    {"_ProFound_water_cpp_old", (DL_FUNC) &_ProFound_water_cpp_old, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_ProFound(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
