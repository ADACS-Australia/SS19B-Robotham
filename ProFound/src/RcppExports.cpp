// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ProFound.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// dilate_cpp
IntegerMatrix dilate_cpp(IntegerMatrix segim, IntegerMatrix kern);
RcppExport SEXP _ProFound_dilate_cpp(SEXP segimSEXP, SEXP kernSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type segim(segimSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type kern(kernSEXP);
    rcpp_result_gen = Rcpp::wrap(dilate_cpp(segim, kern));
    return rcpp_result_gen;
END_RCPP
}
// water_cpp
Rcpp::IntegerMatrix water_cpp(Rcpp::NumericVector image, const int nx, const int ny, const double abstol, const double reltol, const double cliptol, const int ext, const double skycut, const int pixcut, const bool verbose, const int Ncheck);
RcppExport SEXP _ProFound_water_cpp(SEXP imageSEXP, SEXP nxSEXP, SEXP nySEXP, SEXP abstolSEXP, SEXP reltolSEXP, SEXP cliptolSEXP, SEXP extSEXP, SEXP skycutSEXP, SEXP pixcutSEXP, SEXP verboseSEXP, SEXP NcheckSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const int >::type ny(nySEXP);
    Rcpp::traits::input_parameter< const double >::type abstol(abstolSEXP);
    Rcpp::traits::input_parameter< const double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< const double >::type cliptol(cliptolSEXP);
    Rcpp::traits::input_parameter< const int >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const double >::type skycut(skycutSEXP);
    Rcpp::traits::input_parameter< const int >::type pixcut(pixcutSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type Ncheck(NcheckSEXP);
    rcpp_result_gen = Rcpp::wrap(water_cpp(image, nx, ny, abstol, reltol, cliptol, ext, skycut, pixcut, verbose, Ncheck));
    return rcpp_result_gen;
END_RCPP
}
// order_cpp
IntegerVector order_cpp(NumericVector x);
RcppExport SEXP _ProFound_order_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// tabulate_cpp
IntegerVector tabulate_cpp(const IntegerVector& x, const int max);
RcppExport SEXP _ProFound_tabulate_cpp(SEXP xSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(tabulate_cpp(x, max));
    return rcpp_result_gen;
END_RCPP
}
// water_cpp_old
IntegerVector water_cpp_old(const NumericVector image, const int nx, const int ny, const double abstol, const double reltol, const double cliptol, const int ext, const double skycut, const int pixcut, const bool verbose, const int Ncheck);
RcppExport SEXP _ProFound_water_cpp_old(SEXP imageSEXP, SEXP nxSEXP, SEXP nySEXP, SEXP abstolSEXP, SEXP reltolSEXP, SEXP cliptolSEXP, SEXP extSEXP, SEXP skycutSEXP, SEXP pixcutSEXP, SEXP verboseSEXP, SEXP NcheckSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const int >::type nx(nxSEXP);
    Rcpp::traits::input_parameter< const int >::type ny(nySEXP);
    Rcpp::traits::input_parameter< const double >::type abstol(abstolSEXP);
    Rcpp::traits::input_parameter< const double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< const double >::type cliptol(cliptolSEXP);
    Rcpp::traits::input_parameter< const int >::type ext(extSEXP);
    Rcpp::traits::input_parameter< const double >::type skycut(skycutSEXP);
    Rcpp::traits::input_parameter< const int >::type pixcut(pixcutSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type Ncheck(NcheckSEXP);
    rcpp_result_gen = Rcpp::wrap(water_cpp_old(image, nx, ny, abstol, reltol, cliptol, ext, skycut, pixcut, verbose, Ncheck));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _ProFound_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _ProFound_RcppExport_registerCCallable() { 
    R_RegisterCCallable("ProFound", "_ProFound_RcppExport_validate", (DL_FUNC)_ProFound_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP _rcpp_module_boot_adacs();

static const R_CallMethodDef CallEntries[] = {
    {"_ProFound_dilate_cpp", (DL_FUNC) &_ProFound_dilate_cpp, 2},
    {"_ProFound_water_cpp", (DL_FUNC) &_ProFound_water_cpp, 11},
    {"_ProFound_order_cpp", (DL_FUNC) &_ProFound_order_cpp, 1},
    {"_ProFound_tabulate_cpp", (DL_FUNC) &_ProFound_tabulate_cpp, 2},
    {"_ProFound_water_cpp_old", (DL_FUNC) &_ProFound_water_cpp_old, 11},
    {"_rcpp_module_boot_adacs", (DL_FUNC) &_rcpp_module_boot_adacs, 0},
    {"_ProFound_RcppExport_registerCCallable", (DL_FUNC) &_ProFound_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ProFound(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
